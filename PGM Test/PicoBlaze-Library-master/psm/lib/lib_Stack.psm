; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Authors:					Patrick Lehmann
;
; Assembler-Code:		Stack functions for PicoBlaze
; 
; Description:
; ------------------------------------
;	public functions:
;		- _push_arg0,		_pop_arg0
;		- _push_arg1,		_pop_arg1
;		- _push_arg2,		_pop_arg2
;		- _push_arg3,		_pop_arg3
;		- _push_arg03,	_pop_arg03
;		- _push_arg30,	_pop_arg30
;
;		- _push_tmp0,		_pop_tmp0
;		- _push_tmp1,		_pop_tmp1
;		- _push_tmp2,		_pop_tmp2
;		- _push_tmp3,		_pop_tmp3
;		- _push_tmp03,	_pop_tmp03
;		- _push_tmp30,	_pop_tmp30
;
;		- _get0_arg0,		_put0_arg0
;		- _get1_arg0,		_put1_arg0
;		- _get2_arg0,		_put2_arg0
;		- _get3_arg0,		_put3_arg0

;		- _get1_arg1,		_put1_arg1
;		- _get2_arg2,		_put2_arg2
;		- _get3_arg3,		_put3_arg3
;		- _get03_arg03,	_put03_arg03

;		- _get0_tmp0,		_put0_tmp0
;		- _get1_tmp0,		_put1_tmp0
;		- _get2_tmp0,		_put2_tmp0
;		- _get3_tmp0,		_put3_tmp0
;		- _get03_tmp03,	_put03_tmp03

;		- _get1_tmp1,		_put1_tmp1
;		- _get2_tmp2,		_put2_tmp2
;		- _get3_tmp3,		_put3_tmp3
;		- _get03_tmp03,	_put03_tmp30
;
; Note: the stack pointer is stored in register REG_SP
;
; License:
; ==============================================================================
; Copyright 2007-2015 Patrick Lehmann - Dresden, Germany
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
;
;PRAGMA function __push_arg0 begin
__push_arg0:	SUB			REG_SP,			1'd
							STORE		REG_ARG_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_arg0 begin
__pop_arg0:		FETCH		REG_ARG_0, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_arg1 begin
__push_arg1:	SUB			REG_SP,			1'd
							STORE		REG_ARG_1, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_arg1 begin
__pop_arg1:		FETCH		REG_ARG_1, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_arg2 begin
__push_arg2:	SUB			REG_SP,			1'd
							STORE		REG_ARG_2, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_arg2 begin
__pop_arg2:		FETCH		REG_ARG_2, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_arg3 begin
__push_arg3:	SUB			REG_SP,			1'd
							STORE		REG_ARG_3, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_arg3 begin
__pop_arg3:		FETCH		REG_ARG_3, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_arg03 begin
__push_arg03:	; stack operations for registers s0 to s3
							SUB			REG_SP,			1'd
							STORE		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_ARG_1, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_ARG_2, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_ARG_3, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_arg30 begin
__push_arg30:	; stack operations for registers s0 to s3
							SUB			REG_SP,			1'd
							STORE		REG_ARG_3, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_ARG_2, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_ARG_1, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_ARG_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_arg03 begin
__pop_arg03:	FETCH		REG_ARG_0, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_ARG_1, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_ARG_2, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_ARG_3, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_arg30 begin
__pop_arg30:	FETCH		REG_ARG_3, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_ARG_2, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_ARG_1, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_ARG_0, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_tmp0 begin
__push_tmp0:	SUB			REG_SP,			1'd
							STORE		REG_TMP_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_tmp0 begin
__pop_tmp0:		FETCH		REG_TMP_0, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_tmp1 begin
__push_tmp1:	SUB			REG_SP,			1'd
							STORE		REG_TMP_1, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_tmp1 begin
__pop_tmp1:		FETCH		REG_TMP_1, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_tmp2 begin
__push_tmp2:	SUB			REG_SP,			1'd
							STORE		REG_TMP_2, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_tmp2 begin
__pop_tmp2:		FETCH		REG_TMP_2, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_tmp3 begin
__push_tmp3:	SUB			REG_SP,			1'd
							STORE		REG_TMP_3, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_tmp3 begin
__pop_tmp3:		FETCH		REG_TMP_3, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_tmp03 begin
__push_tmp03:	; stack operations for registers s0 to s3
							SUB			REG_SP,			1'd
							STORE		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_TMP_1, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_TMP_2, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_TMP_3, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __push_tmp30 begin
__push_tmp30:	; stack operations for registers s3 to s0
							SUB			REG_SP,			1'd
							STORE		REG_TMP_3, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_TMP_2, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_TMP_1, (REG_SP)
							SUB			REG_SP,			1'd
							STORE		REG_TMP_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_tmp03 begin
__pop_tmp03:	FETCH		REG_TMP_0, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_TMP_1, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_TMP_2, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_TMP_3, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __pop_tmp30 begin
__pop_tmp30:	FETCH		REG_TMP_3, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_TMP_2, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_TMP_1, (REG_SP)
							ADD			REG_SP,			1'd
							FETCH		REG_TMP_0, (REG_SP)
							ADD			REG_SP,			1'd
							RETURN
;PRAGMA function end
;























;PRAGMA function __get0_arg0 begin
__get0_arg0:	FETCH		REG_ARG_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __put0_arg0 begin
__put0_arg0:	STORE		REG_ARG_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __get1_arg0 begin
__get1_arg0:	ADD			REG_SP,			1'd
							FETCH		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put1_arg0 begin
__put1_arg0:	ADD			REG_SP,			1'd
							STORE		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get2_arg0 begin
__get2_arg0:	ADD			REG_SP,			2'd
							FETCH		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put2_arg0 begin
__put2_arg0:	ADD			REG_SP,			2'd
							STORE		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get3_arg0 begin
__get3_arg0:	ADD			REG_SP,			3'd
							FETCH		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put3_arg0 begin
__put3_arg0:	ADD			REG_SP,			3'd
							STORE		REG_ARG_0, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get1_arg1 begin
__get1_arg1:	ADD			REG_SP,			1'd
							FETCH		REG_ARG_1, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put1_arg1 begin
__put1_arg1:	ADD			REG_SP,			1'd
							STORE		REG_ARG_1, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get2_arg2 begin
__get2_arg2:	ADD			REG_SP,			2'd
							FETCH		REG_ARG_2, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put2_arg2 begin
__put2_arg2:	ADD			REG_SP,			2'd
							STORE		REG_ARG_2, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get3_arg3 begin
__get3_arg3:	ADD			REG_SP,			3'd
							FETCH		REG_ARG_3, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put3_arg3 begin
__put3_arg3:	ADD			REG_SP,			3'd
							STORE		REG_ARG_3, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get_arg03 begin
__get_arg03:	CALL		__pop_arg03
							SUB			REG_SP,			4'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put_arg03 begin
__put_arg03:	ADD			REG_SP,			4'd
							JUMP		__push_arg03
;PRAGMA function end
;
;PRAGMA function __put_arg30 begin
__put_arg30:	ADD			REG_SP,			4'd
							JUMP		__push_arg30
;PRAGMA function end
;
;PRAGMA function __get0_tmp0 begin
__get0_tmp0:	FETCH		REG_TMP_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __put0_tmp0 begin
__put0_tmp0:	STORE		REG_TMP_0, (REG_SP)
							RETURN
;PRAGMA function end
;
;PRAGMA function __get1_tmp0 begin
__get1_tmp0:	ADD			REG_SP,			1'd
							FETCH		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put1_tmp0 begin
__put1_tmp0:	ADD			REG_SP,			1'd
							STORE		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get2_tmp0 begin
__get2_tmp0:	ADD			REG_SP,			2'd
							FETCH		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put2_tmp0 begin
__put2_tmp0:	ADD			REG_SP,			2'd
							STORE		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get3_tmp0 begin
__get3_tmp0:	ADD			REG_SP,			3'd
							FETCH		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put3_tmp0 begin
__put3_tmp0:	ADD			REG_SP,			3'd
							STORE		REG_TMP_0, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get1_tmp1 begin
__get1_tmp1:	ADD			REG_SP,			5'd
							FETCH		REG_TMP_1, (REG_SP)
							SUB			REG_SP,			5'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put1_tmp1 begin
__put1_tmp1:	ADD			REG_SP,			1'd
							STORE		REG_TMP_1, (REG_SP)
							SUB			REG_SP,			1'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get2_tmp2 begin
__get2_tmp2:	ADD			REG_SP,			2'd
							FETCH		REG_TMP_2, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put2_tmp2 begin
__put2_tmp2:	ADD			REG_SP,			2'd
							STORE		REG_TMP_2, (REG_SP)
							SUB			REG_SP,			2'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get3_tmp3 begin
__get3_tmp3:	ADD			REG_SP,			3'd
							FETCH		REG_TMP_3, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put3_tmp3 begin
__put3_tmp3:	ADD			REG_SP,			3'd
							STORE		REG_TMP_3, (REG_SP)
							SUB			REG_SP,			3'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __get_tmp03 begin
__get_tmp03:	CALL		__pop_tmp03
							SUB			REG_SP,			4'd
							RETURN
;PRAGMA function end
;
;PRAGMA function __put_tmp03 begin
__put_tmp03:	ADD			REG_SP,			4'd
							JUMP		__push_tmp03
;PRAGMA function end
;
