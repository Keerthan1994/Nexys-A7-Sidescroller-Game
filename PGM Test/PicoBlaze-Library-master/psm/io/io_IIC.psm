; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Authors:					Patrick Lehmann
;
; Assembler-Code:		Common IIC communication functions
; 
; Description:
; ------------------------------------
;	public functions:
;		__io_IIC_TestAddress
;		__io_IIC_WriteByte
;		__io_IIC_ReadByte
;		__io_IIC_WriteRegister
;		__io_IIC_ReadRegister
;		__io_IIC_Dump_RegMap
;		__io_IIC_Scan_DeviceMap
; 
;	private functions:
;   
; License:
; ==============================================================================
; Copyright 2012-2015 Patrick Lehmann - Dresden, Germany
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
;
; I2C macros
; ===============================================
;PRAGMA function __io_IIC_CheckAddress begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;		Returns:
;;			C :	Error
;;			
__io_IIC_CheckAddress:				CALL			__io_BBIO_IIC_SendStartCond
															;
															SL0				REG_ARG_0														; I2C opcode = 0 -> write
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
;PRAGMA function __io_IIC_WriteByte begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;			Arg1 : Data
;;		Returns:
;;			C :	Error
;;			
__io_IIC_WriteByte:						CALL			__io_BBIO_IIC_SendStartCond
															;
															SL0				REG_ARG_0														; I2C opcode = 0 -> write
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;                                             
															LOAD			REG_ARG_0,	REG_ARG_1               
															CALL			__io_BBIO_IIC_SendByte              
															CALL			__io_BBIO_IIC_ReceiveAck            
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
;PRAGMA function __io_IIC_ReadByte begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;		Returns:
;;			Arg0 : Data
;;			C :	Error
;;			
__io_IIC_ReadByte:						CALL			__io_BBIO_IIC_SendStartCond
															;
															SL1				REG_ARG_0														; I2C opcode = 1 -> read
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															CALL			__io_BBIO_IIC_ReceiveByte
															CALL			__io_BBIO_IIC_SendNAck
															;
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
;PRAGMA function __io_IIC_WriteRegister begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;			Arg1 : RegisterAddress
;;			Arg2 : Data
;;		Returns:
;;			C :	Error
;;			
__io_IIC_WriteRegister:				CALL			__io_BBIO_IIC_SendStartCond
															;
															SL0				REG_ARG_0														; I2C opcode = 0 -> write
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_1
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_2
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
;PRAGMA function __io_IIC_WriteDoubleRegister begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;			Arg1 : RegisterAddress
;;			Arg2 : Data0
;;			Arg3 : Data1
;;		Returns:
;;			C :	Error
;;			
__io_IIC_WriteDoubleRegister:	CALL			__io_BBIO_IIC_SendStartCond
															;
															SL0				REG_ARG_0														; I2C opcode = 0 -> write
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_1
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_2
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_3
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
;PRAGMA function __io_IIC_ReadRegister begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;			Arg1 : RegisterAddress
;;		Returns:
;;			Arg0 : Data
;;			C :	Error
;;			
__io_IIC_ReadRegister:				LOAD			REG_TMP_4,	REG_ARG_0
															;
															CALL			__io_BBIO_IIC_SendStartCond
															;
															SL0				REG_ARG_0														; I2C opcode = 0 -> write
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_1
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															CALL			__io_BBIO_IIC_SendRestartCond
															;
															LOAD			REG_ARG_0,	REG_TMP_4
															SL1				REG_ARG_0														; I2C opcode = 1 -> read
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															CALL			__io_BBIO_IIC_ReceiveByte
															CALL			__io_BBIO_IIC_SendNAck
															;
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
;PRAGMA function __io_IIC_ReadDoubleRegister begin
;;		Requires:
;;			Arg0 : DeviceAddress
;;			Arg1 : RegisterAddress
;;		Returns:
;;			Arg0 : Data0
;;			Arg1 : Data1
;;			C :	Error
;;			
__io_IIC_ReadDoubleRegister:	LOAD			REG_TMP_4,	REG_ARG_0
															;
															CALL			__io_BBIO_IIC_SendStartCond
															;
															SL0				REG_ARG_0														; I2C opcode = 0 -> write
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															LOAD			REG_ARG_0,	REG_ARG_1
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															CALL			__io_BBIO_IIC_SendRestartCond
															;
															LOAD			REG_ARG_0,	REG_TMP_4
															SL1				REG_ARG_0														; I2C opcode = 1 -> read
															CALL			__io_BBIO_IIC_SendByte
															CALL			__io_BBIO_IIC_ReceiveAck
															JUMP C,		__io_BBIO_IIC_Abort									; tail call elimination
															;
															CALL			__io_BBIO_IIC_ReceiveByte
															CALL			__io_BBIO_IIC_SendAck
															LOAD			REG_TMP_2,	REG_ARG_0
															;
															CALL			__io_BBIO_IIC_ReceiveByte
															CALL			__io_BBIO_IIC_SendNAck
															;
															LOAD			REG_ARG_1,	REG_TMP_2
															JUMP			__io_BBIO_IIC_SendStopCond					; tail call elimination
;PRAGMA function end
;
