// map31.v - World map logic for  BOTSIM 3.x Rojobot systems
//
// Version:			3.2
// Author:			Roy Kravitz
// Last Modified:	22-May-2015
//	
// Revision History:
// -----------------
// 02-Sep-06		RK		Created this module
// 12-Jan-06		RK		Changed map addressing to 128 x 128
// 24-Jan-06		RK		Modified to use world map generated by CoreGen
// 16-Oct-09		RK		Minor changes (comments only) for conversion to ECE 510
// 24-Oct-11		RK		Minor changes (comments only)
// 26-Oct-12		RK		Modified for kcpsm3 and Nexys 3
// 23-May-15		RK		Updated for Vivado and Nexys4.  No functional changes.
//
// Description
// -----------
// This module implements the world map for rojobot to exist in.  It
// interfaces with the world simulator (implemented in a Picoblaze) and with
// the video logic for project 3.
//
// The interface to the Rojobot simulator is through several registers 
// (produced in world_if.v) that interrogate the map logic (in this module)
// to find the type of location that rojobot is on and the sensor readings
// for the locations around the rojobot.
//
// The interface to the video logic is simpler in that it only returns
// the value of the location being displayed to the video logic.
//
// The major component of map.v is a 16K dual port RAM implemented as a Block RAM
// in the Series 7 FPGA.  This RAM is addressed by the simulator
// with a 7-bit column address and a 7-bit row address.
//
// The world map is 128 (cols) by 128 (rows)with each location on the world map
// roughly convering 16 (4 x 4) pixels on the 640 x 480 display.  Each location is represented by
// two pixels with the following meaning:
//		00 - "ground"   	This is just the background.  No obstruction, no black line
//		01 - "black line"	This location has a black line painted on it
//		10 - "obstruction"	There is an obstruction (like a wall) at this location
//		11-  "reserved"		This is nothing yet so should be treated like "ground"
//
//////////

module map31 (

	// interface to external world emulator
	input [7:0]		wrld_col_addr,	// column address of world map location
	input [7:0]		wrld_row_addr,	// row address of world map location	
	output  [1:0]	wrld_loc_info,	// map value for location [row_addr, col_addr]

		// interface to the video logic
	input [9:0]		vid_row,		// video logic row address
					vid_col,		// video logic column address
	output	[1:0]	vid_pixel_out,	// pixel (location) value

	// interface to the system
	input			clk,			// system clock
					reset			// system reset
);

	localparam
		GND		= 2'b00,	// ground - no obstruction, no black line
		BLKL	= 2'b01,	// black line
		OBSTR	= 2'b10,	// obstruction - either border wall or barrier
		RSVD	= 2'b00;	// reserved - treat as "ground" for now
		
		
		
	reg [13:0] wrld_addr, vid_addr;			// dual port RAM addresses for 
											// external world emulator and video logic
											
	// Instantiate the world map ROM (generated by Xilinx CoreGen)
	world_map MAP (
	.clka(clk),
	.addra(wrld_addr),
	.douta(wrld_loc_info),
	.clkb(clk),
	.addrb(vid_addr),
	.doutb(vid_pixel_out));	
	
	
	// implement the address latches
	always @(posedge clk) begin
			wrld_addr <= {wrld_row_addr[6:0], wrld_col_addr[6:0]};
			vid_addr <= {vid_row[6:0], vid_col[6:0]};
	end
	
endmodule
			
	
		
		
	
						
	